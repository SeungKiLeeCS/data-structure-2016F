Data Structure Project Report
Final Project : Static Code Analyzer
Lee, Seung Ki
Jurado, Alann


Design : Classes & Functions
Main : Driver Class for the rest of the program
Metric : Abstract Class for Functionality of inheriting Metrics Classes
Reader : Class responsible for File I/O
Analyzer: After the metric classes compute the data, combine the data for verbose or brief solution
Inheriting Metric: Individual Classes each representing one static analysis metric
Abstract superclass


Metrics Used for Project:


	Duplicate Code Detection (DRY Principle)
	This metric designed to reduce the repetition of any information. It was chosen for our code as this kind of metric is especially useful in checking code. The implementation of the metric will be similar to the other metrics, having its own class connected to a parent class.


	Property Checking
	//Still a bit unsure what exactly this one does
	The implementation of the metric will be similar to the other metrics, having its own class connected to a parent class.

	Effective Comment Analysis
	This metric will analyze the use of comments in the source code of the codebases. This one has 	possible connection to other metrics and may become part of one larger metric alongside Variable and 	Function Naming. This metric was chosen because comments represent a fundamental part of good code practice.
	The implementation of the metric will be similar to the other metrics, having its own class connected to a parent class.
	
	//Needs a bit more of info
	Cyclomatic Complexity
	This metric will measure the number of different possible paths through the source code of the code bases.
	The implementation of the metric will be similar to the other metrics, having its own class connected to a parent class.


	Variable and Function Naming
	This metric will check the names of variables used in the code and will check the names of the functions. This was chosen because this metric is one of the most common metrics used in code analyzers, and its rather easy implementation. The implementation of the metric will be similar to the other metrics, having its own class connected to a parent class.


	Class Coupling
	This metric will measure the amount of classes that a single class uses. Generally, a low number is good with this metric and a high number is bad. This metric will determine of the code has high 	cohesion and low coupling. High coupling is a sign of bad design as the code is difficult to maintain because of the all classes required to use. This metric was chosen to determine how well a 	code is written in terms of reliability to changes within the source code. The implementation of the metric will be similar to the other metrics, having its own class connected to a parent class.

//More info can be added
Overview of the architecture:
	The tool will be designed with all metrics being their own class. These classes contain all the code needed for the metrics and will be connected to a large parent class. The parent class will use these subclasses to determine “how good” each codebase is and will assign scores to each metric. The code will be updated as each metric is used and in the end a brief score(s) or verbose analysis will be given.

//To be filled in later
Annotated Analysis of codebases:
	1.


	2.


	3.

